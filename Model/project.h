#pragma once

#include <QObject>
#include <QFileInfo>
#include <QGraphicsScene>   //substitute by GraphScene
#include <QMutex>
#include <QRunnable>
#include <QReadWriteLock>
#include "Nodes/node.h"
#include "outputport.h"
#include "View/portitem.h"

class MainWindow;


/**
 * @brief The Project class is the model of the graph consisting out of nodes
 */
class Project : public QObject
{
    Q_OBJECT
public:
    /**
     * @brief Project Constructs a new Project with given parent.
     * @param parent the parent of this Project.
     */
    Project(QFileInfo *filepath = 0, QObject *parent = 0);
    ~Project();

    /**
     * @brief projectPath returns the path this project is stored.
     * @return the path this project is stored.
     */
    QFileInfo* projectPath() const;

    /**
     * @brief setProjectPath sets the path this project is stored.
     * @param projectPath the path this project is stored.
     */
    void setProjectPath(QString filepath);

    /**
     * @brief isSaved returns whether this project was saved after last change.
     * @return whether this project was saved after last change.
     */
    bool isSaved() const;

    /**
     * @brief nodes returns all nodes associated with this project.
     * @return all nodes associated with this project.
     */
    QSet<Node*> nodes() const;
	
    /**
     * @brief setSaved sets or removes the saved flag.
     * @param isSaved whether this project is saved.
     */
    void setSaved(bool isSaved);

    QString name() const;

public slots:

    /**
     * @brief popularizeModelChange popularizes model changes.
     */
    void popularizeModelChange();

    /**
     * @brief popularizeNodesChange popularizes node changes.
     * @param inputs all inputs that have changed.
     */
    void popularizeNodesChange(QList<InputPort *> inputs = QList<InputPort*>());

    void stop();
    void start();

signals:
    /**
     * @brief modelChanged signalizes changing of this project.
     */
    void modelChanged();

    /**
     * @brief calculationStopped signalize calculation stopped.
     */
    void calculationStopped();

    /**
     * @brief nodesChanged signalizes changing of a node.
     * @param input all inputs that have changed.
     */
    void nodesChanged(QList<InputPort*> input = QList<InputPort*>());

    /**
     * @brief settingsChanged signalizes changing of a setting.
     */
    void settingsChanged();

    /**
     * @brief isSaveStatusChanged signalizes this project was saved or changed.
     */
    void isSaveStatusChanged(bool);

    void newLogMessage(QString log);

protected:
    /**
     * @brief childEvent a child event occures.
     * @param event the event.
     */
    void childEvent(QChildEvent* event);

private:

    QSet<Node*> _nodes;                     //becomes generated by childEvent


    //QSet<Output*> _outputs;   //becomes generated by childEvent
    QFileInfo* _projectPath = 0;
    bool _isSaved;
    static QByteArray magicNumber();

    friend QDataStream &operator << (QDataStream &ostream, const Project *project);
    friend QDataStream &operator >> (QDataStream &istream, Project *&project);
};

QDataStream &operator << (QDataStream &ostream, const Project *project);
QDataStream &operator >> (QDataStream &istream, Project *&project);



